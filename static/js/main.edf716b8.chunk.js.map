{"version":3,"sources":["items.tsx","Orders.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["items","defaultOrder","amount","item","payment","getItem","flat","find","name","OrdersForm","push","remove","values","form","orders","map","order","index","orderItems","from","cost","discount","Math","floor","reduce","x","y","profit","days","max","profitPerDay","round","key","type","step","validate","value","style","width","component","slice","level","label","size","onClick","colSpan","className","App","href","initialValues","validationSchema","object","shape","number","integer","min","mixed","oneOf","filter","array","of","onSubmit","errors","Orders","Object","keys","length","flatMap","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.edf716b8.chunk.js","sourcesContent":["// Re-export items.json with better types\nimport inferredItems from \"./items.json\"\n\ntype Item = { name: string } & (\n  | {}\n  | { cost: number; days: number }\n  | { from: string[] }\n)\n\nconst items: Item[][] = inferredItems\nexport default items\n","import { ArrayHelpers, Field, FormikProps } from \"formik\"\nimport React from \"react\"\n\nimport items from \"./items\"\nimport \"./Orders.css\"\nimport { Order, Values } from \"./types\"\n\nconst defaultOrder: Order = {\n  amount: 5,\n  item: \"caroot\",\n  payment: 1,\n}\n\nfunction getItem(item: string) {\n  return items.flat().find(({ name }) => name === item)!\n}\n\nexport default function OrdersForm({\n  push,\n  remove,\n  form: { values },\n}: ArrayHelpers & { form: FormikProps<Values> }) {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Items</th>\n          <th>Cost</th>\n          <th>Payment</th>\n          <th>Profit</th>\n          <th>Days</th>\n          <th>Profit/Day</th>\n          <th />\n        </tr>\n      </thead>\n\n      <tbody>\n        {values.orders.map((order, index) => {\n          let orderItems = [getItem(order.item)]\n          if (\"from\" in orderItems[0]) {\n            orderItems = orderItems[0].from.map(getItem)\n          }\n\n          const cost = orderItems\n            .map(\n              (item) =>\n                (\"cost\" in item\n                  ? item.name === values.discount\n                    ? Math.floor(item.cost * 0.5)\n                    : item.cost\n                  : 0) * order.amount\n            )\n            .reduce((x, y) => x + y)\n          const profit = order.payment - cost\n          // maximum\n          const days = orderItems\n            .map((item) => (\"days\" in item ? item.days : 0))\n            .reduce((x, y) => Math.max(x, y))\n          const profitPerDay = Math.round(profit / (days || 1))\n\n          return (\n            <tr key={index}>\n              <td>\n                <Field\n                  name={`orders.${index}.amount`}\n                  type=\"number\"\n                  step={5}\n                  validate={(value: number) => {\n                    if (value % 5)\n                      return `orders.${index}.amount must by divisible by 5`\n                  }}\n                  style={{ width: \"2.5em\" }}\n                />\n\n                <Field\n                  component=\"select\"\n                  name={`orders.${index}.item`}\n                  style={{ width: \"11em\" }}\n                >\n                  {items.slice(0, values.level).map((items, index) => (\n                    <optgroup key={index} label={`Plenny's level ${index + 1}`}>\n                      {items.map(({ name }) => (\n                        <option key={name}>{name}</option>\n                      ))}\n                    </optgroup>\n                  ))}\n                </Field>\n              </td>\n\n              <td>{cost}</td>\n\n              <td>\n                <Field\n                  name={`orders.${index}.payment`}\n                  type=\"number\"\n                  size={5}\n                  style={{ width: \"4em\" }}\n                />\n              </td>\n\n              <td>{profit}</td>\n\n              <td>{days}</td>\n\n              <td>{profitPerDay}</td>\n\n              <td>\n                <button type=\"button\" onClick={() => remove(index)}>\n                  X\n                </button>\n              </td>\n            </tr>\n          )\n        })}\n      </tbody>\n\n      <tfoot>\n        <tr>\n          <td colSpan={8}>\n            <button\n              className=\"fluid\"\n              type=\"button\"\n              onClick={() => push(defaultOrder)}\n            >\n              Add\n            </button>\n          </td>\n        </tr>\n      </tfoot>\n    </table>\n  )\n}\n","import { Field, FieldArray, Form, Formik, FormikErrors } from \"formik\"\nimport { Persist } from \"formik-persist\"\nimport React from \"react\"\nimport { array, mixed, number, object } from \"yup\"\n\nimport items from \"./items\"\nimport Orders from \"./Orders\"\nimport { Values, Order } from \"./types\"\n\nexport default function App() {\n  return (\n    <>\n      <h1>\n        <a href=\"https://ooblets.com/\">Ooblets</a> Calculator\n      </h1>\n      <p>\n        Visit <a href=\"https://ooblets.gamepedia.com/Plenny's\">Plenny's</a> and\n        enter what bulk orders you have available today. We'll tell you how you\n        can best make a profit.\n      </p>\n\n      <Formik<Values>\n        initialValues={{\n          level: 1,\n          discount: \"none\",\n          orders: [],\n        }}\n        validationSchema={object().shape({\n          level: number().integer().min(1).max(4),\n          discount: mixed().oneOf([\n            \"none\",\n            ...items\n              .flat()\n              .filter((item) => \"cost\" in item)\n              .map((item) => item.name),\n          ]),\n          orders: array().of(\n            object().shape({\n              amount: number().integer().min(5),\n              item: mixed().oneOf(items.flat().map((item) => item.name)),\n              payment: number().integer().min(1),\n            })\n          ),\n        })}\n        onSubmit={() => {}}\n      >\n        {({ errors, values }) => (\n          <Form>\n            <input type=\"reset\" />\n\n            <div>\n              <label>\n                Plenny's level:\n                <Field name=\"level\" type=\"number\" min={1} max={4} />\n              </label>\n            </div>\n\n            <div>\n              <label>\n                Meed's discount:\n                <Field\n                  component=\"select\"\n                  name=\"discount\"\n                  style={{ width: \"9em\" }}\n                >\n                  <option>none</option>\n                  {items.slice(0, values.level).map((items, index) => (\n                    <optgroup key={index} label={`Plenny's level ${index + 1}`}>\n                      {items\n                        .filter((item) => \"cost\" in item)\n                        .map(({ name }) => (\n                          <option key={name}>{name}</option>\n                        ))}\n                    </optgroup>\n                  ))}\n                </Field>\n              </label>\n            </div>\n\n            <h2>Orders</h2>\n            <FieldArray\n              name=\"orders\"\n              // @ts-ignore\n              component={Orders}\n            />\n\n            {Object.keys(errors).length ? <h2>Errors</h2> : null}\n            <ul>\n              {[\n                errors.level,\n                errors.discount,\n                ...((errors.orders as\n                  | FormikErrors<Order>[]\n                  | undefined)?.flatMap(Object.values) ?? []),\n              ]\n                .filter((error) => error)\n                .map((error) => (\n                  <li key={error}>{error}</li>\n                ))}\n            </ul>\n\n            <Persist name=\"form\" />\n          </Form>\n        )}\n      </Formik>\n\n      <p>\n        <a href=\"https://github.com/nickmccurdy/ooblets-calculator\">\n          Source on GitHub\n        </a>\n      </p>\n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"typeface-fredoka-one\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}